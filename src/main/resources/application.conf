akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/rtjvm/journal"


akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/rtjvm/snapshots"

localStores {
  akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
  akka.persistence.journal.leveldb.dir = "target/localStores/journal"

  akka.persistence.journal.leveldb.compaction-intervals {
    simple-persistent-actor = 1000
    "*" = 5000
  }

  akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  akka.persistence.snapshot-store.local.dir = "target/localStores/snapshots"
}

postgresDemo {
  akka.persistence.journal.plugin = "jdbc-journal"
  akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

  akka-persistence-jdbc {
    shared-databases { //custom name
      slick { //custom name
        profile = "slick.jdbc.PostgresProfile$"
        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/rtjvm"
          user = "docker"
          password = "docker"
        }
      }
    }
  }
  jdbc-journal {
    use-shared-db = "slick"
  }

  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

cassandraDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  // default values: https://doc.akka.io/docs/akka-persistence-cassandra/current/configuration.html#default-configuration
}

customSerializerDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  akka.actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      rtjvm = "serializers.UserRegistrationSerializer"
    }

    serialization-bindings {
      "serializers.UserRegistered" = rtjvm //fqn of class
      //others:
      // java serializer is used by default
    }
  }
}

eventAdapters {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      guitar-inventory-enhancer = "practices.EventAdapters$GuitarReadEventAdapter"
    }

    event-adapter-bindings {
      "practices.EventAdapters$GuitarAdded" = guitar-inventory-enhancer
    }
  }
}


detachingModels {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      detach-adapter = "practices.ModelAdapter"
    }

    event-adapter-bindings {
      "practices.DomainModel$CouponApplied" = detach-adapter
      "practices.DataModel$WrittenCouponApplied" = detach-adapter
      "practices.DataModel$WrittenCouponAppliedV2" = detach-adapter
    }
  }
}

